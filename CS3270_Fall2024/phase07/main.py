import logging as logimport timefrom file_handler import FileHandlerfrom concurrent_csv_handler import ConcurrentCSVHandlerfrom concurrent_data_calculator import ConcurrentDataCalculator as DataCalcdef configure_logging(level: int = log.DEBUG, exclude: list[str] = None):    """    Configure the logging module with the specified level and format.    """    if exclude is None:        exclude = []    for name in exclude:        if log.getLogger(name).hasHandlers():            log.getLogger(name).setLevel(log.CRITICAL)        log.getLogger(name).setLevel(log.CRITICAL)    log_level = level    log_format = "%(filename)s:%(lineno)d | %(asctime)s | %(levelname)s | \n\t%(message)s\n"    log_datefmt = "%Y-%m-%d (%H:%M:%S)"    log.basicConfig(        level=log_level,        format=log_format,        datefmt=log_datefmt,    )def main():    """    Main function to run the program: opens a file dialog, processes data, calculates statistics,    and visualizes weather trends.    """    # Initialize the FileHandler    file_handler = FileHandler()    try:        # Retrieve the file path using the FileHandler class        file_path = file_handler.get_file(file_type="csv")    except FileNotFoundError as e:        log.error(f"File not found: {e}")        return    except Exception as e:        log.error(f"Unexpected error: {e}")        return    start_time = time.time()    # Initialize the CSVHandler to process the CSV file    csv_handler = ConcurrentCSVHandler(file_path)    # Data analysis for numeric columns    columns = [        'humidity',  # Humidity percentage        'wind_mph',  # Wind speed in miles per hour        'wind_degree',  # Wind direction in degrees        'temperature_fahrenheit',  # Temperature in Fahrenheit        'precip_in',  # Precipitation in inches        'air_quality_PM2.5',  # Air quality containing particulate matter with a diameter of 2.5 micrometers or less.        'country',  # Country name    ]    filter_parameters = [        ">50",  # Humidity        ">5",  # Wind Speed        "",  # Wind Direction        ">=70",  # Temperature        ">0",  # Air Quality        "<35",  # Precipitation        "start=c",  # Country    ]    filters = dict(zip(columns, filter_parameters))    log.debug(f"Filters: {filters}")    try:        data = csv_handler.get_data(            columns=columns,            filters=filters        )        for col in data:            analysis = DataCalc(data[col].tolist())            if not analysis:                log.warning(f"Could not analyze column '{col}'")                continue            log.debug(                f"Analysis for {col}"                f"\n\tMean: {analysis.mean}"                f"\n\tMedian: {analysis.median}"                f"\n\tMode: {analysis.mode}"                f"\n\tVariance: {analysis.variance}"                f"\n\tStandard deviation: {analysis.standard_deviation}"                f"\n\tMin: {analysis.min}"                f"\n\tMax: {analysis.max}"            )        elapsed_time = time.time() - start_time        log.info(f"Elapsed time: {elapsed_time:.4f} seconds")    except Exception as e:        log.error(f"Error processing data: {e}")        returnif __name__ == "__main__":    configure_logging(exclude=["matplotlib", "seaborn"])    main()