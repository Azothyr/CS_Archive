import logging as logfrom functools import reduceimport matplotlib.pyplot as pltimport seaborn as snsfrom file_handler import FileHandlerfrom csv_handler import CSVHandlerfrom data_calculator import DataCalculator as DataCalcdef configure_logging(level: int = log.DEBUG):    log_level = level    log_format = "%(filename)s:%(lineno)d | %(asctime)s | %(levelname)s | \n\t%(message)s\n"    log_datefmt = "%Y-%m-%d (%H:%M:%S)"    log.basicConfig(        level=log_level,        format=log_format,        datefmt=log_datefmt,    )def main():    """    Main function to run the program: opens a file dialog, processes data, calculates statistics,    and visualizes weather trends.    """    # Initialize the FileHandler    file_handler = FileHandler()    try:        # Retrieve the file path using the FileHandler class        file_path = file_handler.retrieve_file()    except FileNotFoundError as e:        log.error(f"File not found: {e}")        return    except Exception as e:        log.error(f"Unexpected error: {e}")        return    # Initialize the CSVHandler to process the CSV file    csv_handler = CSVHandler(file_path)    # Data analysis for numeric columns    columns = [        'humidity',  # Humidity percentage        'wind_mph',  # Wind speed in miles per hour        'wind_degree',  # Wind direction in degrees        'temperature_fahrenheit',  # Temperature in Fahrenheit        'precip_in',  # Precipitation in inches        'air_quality_PM2.5',  # Air quality containing particulate matter with a diameter of 2.5 micrometers or less.        'country',  # Country name    ]    filter_parameters = [        ">50",  # Humidity        ">5",  # Wind Speed        "",  # Wind Direction        ">=70",  # Temperature        ">0",  # Air Quality        "<35",  # Precipitation        "start=c",  # Country    ]    filters = dict(zip(columns, filter_parameters))    try:        data = csv_handler.get_data(            columns=columns,            filters=filters        )        visualize_data(data)    except Exception as e:        log.error(f"Error processing data: {e}")        returndef visualize_data(df):    """    Visualizes the data for patterns and trends using matplotlib and seaborn.    """    import os    save_dir = os.path.expanduser("~") + "/Downloads/weather_visualizations"    if not os.path.exists(save_dir):        os.makedirs(save_dir)    # Country-Specific Visualization    countries = df['country'].unique()    plt.figure(figsize=(12, 6))    for country in countries:        country_data = df[df['country'] == country]        sns.lineplot(data=country_data, x=country_data.index, y='temperature_fahrenheit', label=country)    plt.title('Temperature Trends by Country starting with "C"')    plt.xlabel('Time')    plt.ylabel('Temperature (F)')    plt.legend(title='Country')    plt.savefig(f'{save_dir}/temperature_trends.png')    # Plotting Air Quality (PM2.5) and Humidity    plt.figure(figsize=(12, 6))    # Line plot for air quality (PM2.5)    plt.subplot(1, 2, 1)    sns.lineplot(data=df, x=df.index, y='air_quality_PM2.5', color='purple')    plt.title('Air Quality (PM2.5) over Time by Country starting with "C"')    plt.xlabel('Time')    plt.ylabel('PM2.5')    # Line plot for humidity    plt.subplot(1, 2, 2)    sns.lineplot(data=df, x=df.index, y='humidity', color='blue')    plt.title('Humidity over Time by Country starting with "C"')    plt.xlabel('Time')    plt.ylabel('Humidity (%)')    plt.tight_layout()    plt.savefig(f'{save_dir}/air_quality_humidity.png')    # Wind Speed vs Wind Direction    plt.figure(figsize=(10, 6))    sns.scatterplot(data=df, x='wind_degree', y='wind_mph', hue='country', palette='deep')    plt.title('Wind Speed (mph) vs Wind Direction (degrees) by Country starting with "C"')    plt.xlabel('Wind Direction (degrees)')    plt.ylabel('Wind Speed (mph)')    plt.savefig(f'{save_dir}/wind_speed_direction.png')    # Additional visualizations: Temperature distribution by country    plt.figure(figsize=(10, 6))    sns.histplot(data=df, x='temperature_fahrenheit', hue='country', kde=True, bins=20)    plt.title('Temperature Distribution (F) by Country starting with "C"')    plt.xlabel('Temperature (F)')    plt.ylabel('Frequency')    plt.savefig(f'{save_dir}/temperature_distribution.png')    # Precipitation vs Temperature    plt.figure(figsize=(10, 6))    sns.scatterplot(data=df, x='precip_in', y='temperature_fahrenheit', hue='country', palette='coolwarm')    plt.title('Precipitation vs Temperature by Country starting with "C"')    plt.xlabel('Precipitation (inches)')    plt.ylabel('Temperature (F)')    plt.savefig(f'{save_dir}/precip_vs_temp.png')if __name__ == "__main__":    configure_logging()    main()